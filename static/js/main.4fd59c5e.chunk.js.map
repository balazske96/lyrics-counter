{"version":3,"sources":["components/Title/Title.js","context/AppContext.js","components/Text/Text.js","components/RepeatedWords/RepeatedWords.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","AppContext","React","createContext","AppContextProvider","props","useState","repetitionWordDictionary","setRepetitionDictionary","exceptions","setExceptions","Provider","value","children","Text","useContext","TextArea","Input","useEffect","console","log","allowClear","rows","onChange","event","preventDefault","temporaryLibrary","target","trim","split","forEach","word","undefined","RepeatedWords","addToExceptions","prevState","includes","push","Object","keys","map","index","closable","onClose","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qNAGe,SAASA,IACpB,OACI,6BAASC,UAAU,yBACf,mD,2BCJCC,EAAaC,IAAMC,cAAc,MAGvC,SAASC,EAAmBC,GAAQ,IAAD,EAEsBH,IAAMI,SAAS,IAFrC,mBAE/BC,EAF+B,KAELC,EAFK,OAGFN,IAAMI,SAAS,IAHb,mBAG/BG,EAH+B,KAGnBC,EAHmB,KAKtC,OACI,kBAACT,EAAWU,SAAZ,CACIC,MAAO,CACHL,2BACAC,0BACAC,aACAC,kBAGAL,EAAMQ,UCZP,SAASC,IAAQ,IAAD,EAEiCZ,IAAMa,WAAWd,GAAtEM,EAFoB,EAEpBA,yBAA0BC,EAFN,EAEMA,wBAEzBQ,EAAaC,IAAbD,SAqBR,OAJAE,qBAAU,WACNC,QAAQC,IAAIb,KACb,CAACA,IAGA,6BAASP,UAAU,yBACf,2DACA,kBAACgB,EAAD,CAAUK,YAAU,EAACC,KAAM,EAAGC,SAtBV,SAAAC,GACxBA,EAAMC,iBACN,IAAIC,EAAmB,GACLF,EAAMG,OAAOf,MAAMgB,OAAOC,MAAM,UACtCC,SAAQ,SAAAC,QACeC,IAA3BN,EAAiBK,GAEjBL,EAAiBK,IAAS,EAE1BL,EAAiBK,GAAQ,EAE7BvB,EAAwBkB,U,2BCnBrB,SAASO,IAAiB,IAAD,EAOhC/B,IAAMa,WAAWd,GAJjBM,EAHgC,EAGhCA,yBAEAE,GALgC,EAIhCD,wBAJgC,EAKhCC,YACAC,EANgC,EAMhCA,cAGEwB,EAAkB,SAACH,GACrBrB,GAAc,SAAAyB,GAIV,OAHKA,EAAUC,SAASL,IACpBI,EAAUE,KAAKN,GAEZI,MAIf,OACI,6BAASnC,UAAU,kCAGXsC,OAAOC,KAAKhC,GAA0BiC,KAAI,SAACT,EAAMU,GAC7C,OAAuC,IAAnClC,EAAyBwB,IAAgBtB,EAAW2B,SAASL,GAEtDxB,EAAyBwB,GAAQ,IAAMtB,EAAW2B,SAASL,GAC3D,kBAAC,IAAD,CAAKW,UAAQ,EAACC,QAAS,kBAAMT,EAAgBH,IAAOa,MAAM,WAAWb,QADzE,EADI,kBAAC,IAAD,CAAKW,UAAQ,EAACC,QAAS,kBAAMT,EAAgBH,IAAOa,MAAM,WAAWb,OCPrFc,MAdf,WAGI,OACI,kBAACzC,EAAD,KACI,yBAAKJ,UAAU,wBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJI8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.4fd59c5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Title.scss';\r\n\r\nexport default function Title() {\r\n    return (\r\n        <section className=\"lyrics-counter__title\">\r\n            <h1>Repetition Counter</h1>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const AppContext = React.createContext(null);\r\n\r\n\r\nexport function AppContextProvider(props) {\r\n\r\n    const [repetitionWordDictionary, setRepetitionDictionary] = React.useState({});\r\n    const [exceptions, setExceptions] = React.useState([]);\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                repetitionWordDictionary,\r\n                setRepetitionDictionary,\r\n                exceptions,\r\n                setExceptions\r\n            }}>\r\n            {\r\n                props.children\r\n            }\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Text.scss';\r\nimport { Input } from 'antd';\r\nimport {AppContext} from '../../context/AppContext';\r\n\r\n\r\n\r\nexport default function Text() {\r\n\r\n    const {repetitionWordDictionary, setRepetitionDictionary} = React.useContext(AppContext)\r\n\r\n    const { TextArea } = Input;\r\n\r\n    const searchForRepetition = event => {\r\n        event.preventDefault();\r\n        let temporaryLibrary = {}\r\n        let lyricsArray = event.target.value.trim().split(/[\\n, ]/);\r\n        lyricsArray.forEach(word => {\r\n            if (temporaryLibrary[word] !== undefined) {\r\n\r\n                temporaryLibrary[word] += 1;\r\n            } else {\r\n                temporaryLibrary[word] = 1;\r\n            }\r\n            setRepetitionDictionary(temporaryLibrary);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(repetitionWordDictionary);\r\n    }, [repetitionWordDictionary])\r\n \r\n    return (\r\n        <section className=\"lyrics-counter__input\">\r\n            <label>Insert your lyrics here:</label>\r\n            <TextArea allowClear rows={5} onChange={searchForRepetition} />\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { Tag } from 'antd';\r\nimport './RepeatedWords.scss';\r\nimport { AppContext } from '../../context/AppContext';\r\n\r\nexport default function RepeatedWords() {\r\n\r\n    const {\r\n        repetitionWordDictionary,\r\n        setRepetitionDictionary,\r\n        exceptions,\r\n        setExceptions\r\n    } = React.useContext(AppContext);\r\n\r\n    const addToExceptions = (word) => {\r\n        setExceptions(prevState => {\r\n            if (!prevState.includes(word)) {\r\n                prevState.push(word)\r\n            }\r\n            return prevState;\r\n        })\r\n    }\r\n\r\n    return (\r\n        <section className=\"lyrics-counter__repeated-words\">\r\n\r\n            {\r\n                Object.keys(repetitionWordDictionary).map((word, index) => {\r\n                    if (repetitionWordDictionary[word] === 2 && !exceptions.includes(word)) {\r\n                        return <Tag closable onClose={() => addToExceptions(word)} color=\"#9b870c\">{word}</Tag>\r\n                    } else if (repetitionWordDictionary[word] > 2 && !exceptions.includes(word)) {\r\n                        return <Tag closable onClose={() => addToExceptions(word)} color=\"#cd201f\">{word}</Tag>\r\n                    }\r\n                })\r\n            }\r\n        </section>\r\n    )\r\n}   ","import React from 'react';\nimport './App.scss';\nimport Title from './components/Title/Title';\nimport Text from './components/Text/Text';\nimport 'antd/dist/antd.css';\nimport RepeatedWords from './components/RepeatedWords/RepeatedWords';\nimport { AppContextProvider } from './context/AppContext';\n\nfunction App() {\n\n\n    return (\n        <AppContextProvider>\n            <div className=\"lyrics-counter__main\">\n                <Title />\n                <Text />\n                <RepeatedWords />\n            </div>\n        </AppContextProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}